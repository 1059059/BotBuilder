{
  "swagger": "2.0",
  "info": {
    "version": "v1",
    "title": "Bot Connector - Direct Line API - V1.0",
    "description": "Direct Line 1.0\r\n===========\r\n\r\n\r\nThe Direct Line API is a simple REST API for connecting directly to a single bot. This API is intended for developers\r\nwriting their own client applications, web chat controls, mobile apps, or service-to-service applications that will\r\ntalk to their bot.\r\n\r\nWithin the Direct Line API, you will find:\r\n\r\n* An **authentication mechanism** using standard secret/token patterns\r\n* The ability to **send** messages from your client to your bot via an HTTP POST message\r\n* The ability to **receive** messages by **polling HTTP GET**\r\n* A stable **schema**, even if your bot changes its protocol version\r\n\r\n# Authentication: Secrets and Tokens\r\n\r\nDirect Line allows you to authenticate all calls with either a secret (retrieved from the Direct Line channel configuration page) or a token (which you may get at runtime by converting your secret).\r\n\r\nA Direct Line **secret** is a master key that can access any conversation, and create tokens. Secrets do not expire.\r\n\r\nA Direct Line **token** is a key for a single conversation. It expires but can be refreshed.\r\n\r\nIf you're writing a service-to-service application, using the secret may be simplest. If you're writing an application where the client runs in a web browser or mobile app, you may want to exchange your secret for a token, which only works for a single conversation and will expire unless refreshed. You choose which security model works best for you.\r\n\r\nYour secret or token is communicated in the \"Authorization\" header of every call, with the BotConnector scheme. Example below.\r\n\r\n    -- connect to directline.botframework.com --\r\n    POST /api/conversations/abc123/messages HTTP/1.1\r\n    Authorization: BotConnector RCurR_XV9ZA.cwA.BKA.iaJrC8xpy8qbOF5xnR2vtCX7CZj0LdjAPGfiCpg4Fv0\r\n    [other HTTP headers, omitted]\r\n\r\nYou may notice that your Direct Line client credentials are different from your bot's credentials. This is intentional, and it allows you to revise your keys independently and lets you share client tokens without disclosing your bot's password. \r\n\r\n## Exchanging a secret for a token\r\n\r\nThis operation is optional. Use this step if you want to prevent clients from accessing conversations they aren't participating in.\r\n\r\nTo exchange a secret for a token, POST to /api/tokens/conversation with your secret in the auth header and no HTTP body.\r\n\r\n    -- connect to directline.botframework.com --\r\n    POST /api/tokens/conversation HTTP/1.1\r\n    Authorization: BotConnector RCurR_XV9ZA.cwA.BKA.iaJrC8xpy8qbOF5xnR2vtCX7CZj0LdjAPGfiCpg4Fv0\r\n\t[other headers]\r\n\r\n    -- response from directline.botframework.com --\r\n    HTTP/1.1 200 OK\r\n\t[other headers]\r\n\r\n    RCurR_XV9ZA.cwA.BKA.iaJrC8xpy8qbOF5xnR2vtCX7CZj0LdjAPGfiCpg4Fv0y8qbOF5xPGfiCpg4Fv0y8qqbOF5x8qbOF5xn\r\n\r\nIf successful, the response is a token suitable for one conversation. The token expires in 30 minutes and must be refreshed before then to remain useful.\r\n\r\n## Refreshing a token\r\n\r\nA token may be refreshed an unlimited number of times unless it is expired. Tokens are valid for 30 minutes from the time they are generated.\r\n\r\nTo refresh a token, POST to /v3/direct/line/tokens/refresh. This method is valid only for unexpired tokens.\r\n\r\n    -- connect to directline.botframework.com --\r\n    POST /api/tokens/renew HTTP/1.1\r\n    Authorization: BotConnector RCurR_XV9ZA.cwA.BKA.iaJrC8xpy8qbOF5xnR2vtCX7CZj0LdjAPGfiCpg4Fv0y8qbOF5xPGfiCpg4Fv0y8qqbOF5x8qbOF5xn\r\n\t[other headers]\r\n\r\n    -- response from directline.botframework.com --\r\n    HTTP/1.1 200 OK\r\n\t[other headers]\r\n\r\n\tRCurR_XV9ZA.cwA.BKA.y8qbOF5xPGfiCpg4Fv0y8qqbOF5x8qbOF5xniaJrC8xpy8qbOF5xnR2vtCX7CZj0LdjAPGfiCpg4Fv0\r\n\r\n# REST calls for a Direct Line conversation\r\n\r\nDirect Line conversations are explicitly opened by clients and may run as long as the bot and client participate (and have valid credentials). While the conversation is open, the bot and client may both send messages. More than one client may connect to a given conversation and each client may participate on behalf of multiple users.\r\n\r\n## Starting a conversation\r\n\r\nClients begin by explicitly starting a conversation. If successful, the Direct Line service replies with a JSON object containing a conversation ID and a token.\r\n\r\n    -- connect to directline.botframework.com --\r\n    POST /api/conversations HTTP/1.1\r\n    Authorization: BotConnector RCurR_XV9ZA.cwA.BKA.iaJrC8xpy8qbOF5xnR2vtCX7CZj0LdjAPGfiCpg4Fv0y8qbOF5xPGfiCpg4Fv0y8qqbOF5x8qbOF5xn\r\n\t[other headers]\r\n\r\n    -- response from directline.botframework.com --\r\n    HTTP/1.1 200 OK\r\n\t[other headers]\r\n\r\n\t{\r\n        \"conversationId\": \"abc123\",\r\n        \"token\": \"RCurR_XV9ZA.cwA.BKA.iaJrC8xpy8qbOF5xnR2vtCX7CZj0LdjAPGfiCpg4Fv0y8qbOF5xPGfiCpg4Fv0y8qqbOF5x8qbOF5xn\",\r\n    }\r\n\r\n## Sending an Activity to the bot\r\n\r\nUsing the Direct Line 1.0 protocol, clients and bots may exchange any message type that the bot and client support.\r\n\r\nTo send a message to a bot,\r\n\r\n1. the client formulates the message according to the message schema (see below)\r\n2. the client issues a POST message to /api/conversations/{id}/messages\r\n3. the service returns when the activity was delivered to the bot, with an HTTP status code reflecting the bot's status code. If the POST was successful, the service returns a JSON payload containing the ID of the Activity that was sent.\r\n\r\nExample follows.\r\n\r\n    -- connect to directline.botframework.com --\r\n    POST /api/conversations/abc123/messages HTTP/1.1\r\n    Authorization: BotConnector RCurR_XV9ZA.cwA.BKA.iaJrC8xpy8qbOF5xnR2vtCX7CZj0LdjAPGfiCpg4Fv0\r\n\t[other headers]\r\n\r\n    {\r\n      \"text\": \"hello\",\r\n      \"from\": \"user1\"\r\n    }\r\n\r\n    -- response from directline.botframework.com --\r\n    HTTP/1.1 204 No Content\r\n\t[other headers]\r\n\r\nThe client's message is available via polling GET and is not returned inline.\r\n\r\nThe total time to POST a message to a Direct Line conversation is:\r\n\r\n* Transit time to the Direct Line service,\r\n* Internal processing time within Direct Line (typically less than 120ms)\r\n* Transit time to the bot\r\n* Processing time within the bot\r\n* Transit time for HTTP responses to travel back to the client.\r\n\r\nIf the bot generates an error, that error will trigger an HTTP 500 error in the ```POST /api/conversations/{id}/messages``` call.\r\n\r\n## Receiving Activities from the bot\r\n\r\nTo retrieve messages, issue a GET call to the conversation endpoint. Optionally supply a watermark, indicating the most recent message seen. The watermark field accompanies all GET messages as a property in the message set.\r\n\r\n    -- connect to directline.botframework.com --\r\n    GET /api/conversations/abc123/messages?watermark=0001a-94 HTTP/1.1\r\n    Authorization: BotConnector RCurR_XV9ZA.cwA.BKA.iaJrC8xpy8qbOF5xnR2vtCX7CZj0LdjAPGfiCpg4Fv0\r\n\t[other headers]\r\n\r\n    -- response from directline.botframework.com --\r\n    HTTP/1.1 200 OK\r\n\t[other headers]\r\n\r\n    {\r\n      \"messages\": [{\r\n          \"conversation\": \"abc123\",\r\n          \"id\": \"abc123|0000\",\r\n          \"text\": \"hello\",\r\n          \"from\": \"user1\"\r\n        }, {\r\n          \"conversation\": \"abc123\",\r\n          \"id\": \"abc123|0001\",\r\n          \"text\": \"Nice to see you, user1!\",\r\n          \"from\": \"bot1\"\r\n        }\r\n      ],\r\n      \"watermark\": \"0001a-95\"\r\n    }\r\n\r\nClients should page through the available messages by advancing the \"watermark\" value until no messages are returned.\r\n\r\n### Timing considerations \r\n\r\nThe \"watermark\" field sent in GET responses is reliable. You will not miss messages as long as you replay the watermark verbatim.\r\n\r\nClients should choose a polling interval that matches their intended use.\r\n\r\n* Service-to-service applications often use a polling interval of 5s or 10s.\r\n* Client-facing applications often use a polling interval of 1s, and fire an additional request ~300ms after every message the client sends to rapidly pick up a bot's response. This 300ms delay should be adjusted based on the bot's speed and transit time.\r\n\r\n# Schema\r\n\r\nThe Direct Line protocol has two schema versions:\r\n\r\n* A simplified \"1.0\" schema for simple and legacy clients.\r\n* A full \"3.0\" schema, identical to the Bot Framework v3 protocol schema.\r\n\r\nIf unsure, use the 3.0 schema.\r\n\r\n# Libraries for the Direct Line API\r\n\r\nThe Direct Line API is designed to be coded directly, but the Bot Framework includes libraries and controls that help you to embed Direct-Line-powered bots into your application.\r\n\r\n* The Bot Framework Web Chat control is an easy way to embed the Direct Line channel into a webpage.\r\n* [Direct Line Nuget package](https://www.nuget.org/packages/Microsoft.Bot.Connector.DirectLine) with libraries for both .Net and UWP. Be sure to use the 1.x version of these binaries.\r\n* You may generate your own from the [Direct Line Swagger file](swagger.json)\r\n",
    "termsOfService": "https://www.microsoft.com/en-us/legal/intellectualproperty/copyright/default.aspx",
    "contact": {
      "name": "Bot Framework",
      "url": "https://botframework.com",
      "email": "botframework@microsoft.com"
    },
    "license": {
      "name": "The MIT License (MIT)",
      "url": "https://opensource.org/licenses/MIT"
    }
  },
  "host": "directline.botframework.com",
  "schemes": [ "https" ],
  "paths": {
    "/api/conversations": {
      "post": {
        "tags": [ "Conversations" ],
        "summary": "Start a new conversation",
        "operationId": "Conversations_NewConversation",
        "consumes": [],
        "produces": [ "application/json", "text/json", "text/html", "application/xml", "text/xml" ],
        "responses": {
          "200": {
            "description": "A conversation object is returned\r\n",
            "schema": { "$ref": "#/definitions/Conversation" }
          },
          "401": { "description": "No content is returned with this status code.\r\n\r\nThe Authorization header is missing for this request.\r\n" },
          "403": { "description": "You are forbidden from performing this action because your token or secret is invalid.\r\n\r\n" },
          "404": { "description": "The response is an ErrorMessage response.  Look at the Code field for a breakdown and message field for description of the error.\r\n\r\nresource was not found" },
          "409": { "description": "You are trying to create an object that already exists." }
        },
        "deprecated": false
      }
    },
    "/api/conversations/{conversationId}/messages": {
      "get": {
        "tags": [ "Conversations" ],
        "summary": "Get messages in this conversation. This method is paged with the 'watermark' parameter.",
        "operationId": "Conversations_GetMessages",
        "consumes": [],
        "produces": [ "application/json", "text/json", "text/html", "application/xml", "text/xml" ],
        "parameters": [
          {
            "name": "conversationId",
            "in": "path",
            "description": "Conversation ID",
            "required": true,
            "type": "string"
          },
          {
            "name": "watermark",
            "in": "query",
            "description": "(Optional) only returns messages newer than this watermark",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "A set of messages is returned",
            "schema": { "$ref": "#/definitions/MessageSet" }
          },
          "401": { "description": "No content is returned with this status code.\r\n\r\nThe Authorization header is missing for this request.\r\n" },
          "403": { "description": "You are forbidden from performing this action because your token or secret is invalid.\r\n\r\n" },
          "404": { "description": "The response is an ErrorMessage response.  Look at the Code field for a breakdown and message field for description of the error.\r\n\r\nresource was not found" }
        },
        "deprecated": false
      },
      "post": {
        "tags": [ "Conversations" ],
        "summary": "Send a message",
        "operationId": "Conversations_PostMessage",
        "consumes": [ "application/json", "text/json", "text/html", "application/xml", "text/xml", "application/x-www-form-urlencoded" ],
        "produces": [],
        "parameters": [
          {
            "name": "conversationId",
            "in": "path",
            "description": "Conversation ID",
            "required": true,
            "type": "string"
          },
          {
            "name": "message",
            "in": "body",
            "description": "Message to send",
            "required": true,
            "schema": { "$ref": "#/definitions/Message" }
          }
        ],
        "responses": {
          "204": { "description": "Success - no content" },
          "401": {
            "description": "No content is returned with this status code.\r\n\r\nThe Authorization header is missing for this request.\r\n",
            "schema": { "$ref": "#/definitions/ErrorMessage" }
          },
          "403": {
            "description": "You are forbidden from performing this action because your token or secret is invalid.\r\n\r\n",
            "schema": { "$ref": "#/definitions/ErrorMessage" }
          },
          "404": {
            "description": "The response is an ErrorMessage response.  Look at the Code field for a breakdown and message field for description of the error.\r\n\r\nresource was not found",
            "schema": { "$ref": "#/definitions/ErrorMessage" }
          }
        },
        "deprecated": false
      }
    },
    "/api/conversations/{conversationId}/upload": {
      "post": {
        "tags": [ "Conversations" ],
        "summary": "Upload file(s) and send as attachment(s)",
        "operationId": "Conversations_Upload",
        "consumes": [],
        "produces": [],
        "parameters": [
          {
            "name": "conversationId",
            "in": "path",
            "description": "",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "204": { "description": "Success - no content" },
          "401": {
            "description": "No content is returned with this status code.\r\n\r\nThe Authorization header is missing for this request.\r\n",
            "schema": { "$ref": "#/definitions/ErrorMessage" }
          },
          "403": {
            "description": "You are forbidden from performing this action because your token or secret is invalid.\r\n\r\n",
            "schema": { "$ref": "#/definitions/ErrorMessage" }
          },
          "404": {
            "description": "The response is an ErrorMessage response.  Look at the Code field for a breakdown and message field for description of the error.\r\n\r\nresource was not found",
            "schema": { "$ref": "#/definitions/ErrorMessage" }
          }
        },
        "deprecated": false
      }
    },
    "/api/tokens/{conversationId}/renew": {
      "get": {
        "tags": [ "Tokens" ],
        "summary": "Renew a token for a conversation",
        "operationId": "Tokens_RenewToken",
        "consumes": [],
        "produces": [ "application/json", "text/json", "text/html", "application/xml", "text/xml" ],
        "parameters": [
          {
            "name": "conversationId",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "A string is returned\r\n",
            "schema": { "type": "string" }
          },
          "401": { "description": "No content is returned with this status code.\r\n\r\nThe Authorization header is missing for this request.\r\n" },
          "403": { "description": "You are forbidden from performing this action because your token or secret is invalid.\r\n\r\n" },
          "404": { "description": "The response is an ErrorMessage response.  Look at the Code field for a breakdown and message field for description of the error.\r\n\r\nresource was not found" }
        },
        "deprecated": false
      }
    },
    "/api/tokens/conversation": {
      "post": {
        "tags": [ "Tokens" ],
        "summary": "Generate a token for a new conversation",
        "operationId": "Tokens_GenerateTokenForNewConversation",
        "consumes": [],
        "produces": [ "application/json", "text/json", "text/html", "application/xml", "text/xml" ],
        "responses": {
          "200": {
            "description": "A string is returned\r\n",
            "schema": { "type": "string" }
          },
          "401": { "description": "No content is returned with this status code.\r\n\r\nThe Authorization header is missing for this request.\r\n" },
          "403": { "description": "You are forbidden from performing this action because your token or secret is invalid.\r\n\r\n" },
          "404": { "description": "The response is an ErrorMessage response.  Look at the Code field for a breakdown and message field for description of the error.\r\n\r\nresource was not found" }
        },
        "deprecated": false
      }
    }
  },
  "definitions": {
    "Conversation": {
      "description": "An object representing a conversation or a conversation token",
      "type": "object",
      "properties": {
        "conversationId": {
          "description": "ID for this conversation",
          "type": "string"
        },
        "token": {
          "description": "Token scoped to this conversation",
          "type": "string"
        },
        "eTag": { "type": "string" }
      }
    },
    "MessageSet": {
      "description": "A collection of messages",
      "type": "object",
      "properties": {
        "messages": {
          "description": "Messages",
          "type": "array",
          "items": { "$ref": "#/definitions/Message" }
        },
        "watermark": {
          "description": "Maximum watermark included in this set of messages",
          "type": "string"
        },
        "eTag": { "type": "string" }
      }
    },
    "Message": {
      "description": "A communication message sent to/from Direct Line",
      "type": "object",
      "properties": {
        "id": {
          "description": "ID for this message",
          "type": "string"
        },
        "conversationId": {
          "description": "Conversation ID for this message",
          "type": "string"
        },
        "created": {
          "format": "date-time",
          "description": "UTC timestamp when this message was created",
          "type": "string"
        },
        "from": {
          "description": "Identity of the sender of this message",
          "type": "string"
        },
        "text": {
          "description": "Text in this message",
          "type": "string"
        },
        "channelData": {
          "$ref": "#/definitions/Object",
          "description": "Opaque block of data passed to/from bot via the ChannelData field"
        },
        "images": {
          "description": "Array of URLs for images included in this message",
          "type": "array",
          "items": { "type": "string" }
        },
        "attachments": {
          "description": "Array of non-image attachments included in this message",
          "type": "array",
          "items": { "$ref": "#/definitions/Attachment" }
        },
        "eTag": { "type": "string" }
      }
    },
    "Object": {
      "type": "object",
      "properties": {}
    },
    "Attachment": {
      "description": "An attachment",
      "type": "object",
      "properties": {
        "url": {
          "description": "URL for this attachment",
          "type": "string"
        },
        "contentType": {
          "description": "Content type for this attachment",
          "type": "string"
        }
      }
    },
    "ErrorMessage": {
      "description": "A standardized message error payload",
      "type": "object",
      "properties": { "error": { "$ref": "#/definitions/Error" } }
    },
    "Error": {
      "type": "object",
      "properties": {
        "code": {
          "description": "Error code",
          "enum": [ "MissingProperty", "MalformedData", "NotFound", "ServiceError", "Internal", "InvalidRange", "NotSupported", "NotAllowed", "BadCertificate" ],
          "type": "string"
        },
        "message": {
          "description": "Error message",
          "type": "string"
        },
        "statusCode": {
          "format": "int32",
          "description": "Status code",
          "type": "integer"
        }
      }
    }
  }
}