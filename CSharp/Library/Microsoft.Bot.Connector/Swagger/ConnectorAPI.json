{
  "swagger": "2.0",
  "info": {
    "version": "v3",
    "title": "Microsoft Bot Connector API - v3.0",
    "description": "© 2016 Microsoft",
    "termsOfService": "https://www.microsoft.com/en-us/legal/intellectualproperty/copyright/default.aspx",
    "contact": {
      "name": "Bot Framework",
      "url": "https://botframework.com",
      "email": "botframework@microsoft.com"
    },
    "license": {
      "name": "The MIT License (MIT)",
      "url": "https://opensource.org/licenses/MIT"
    }
  },
  "host": "localhost:34957",
  "schemes": [ "https" ],
  "paths": {
    "/api/v3/conversations": {
      "post": {
        "tags": [ "Conversations" ],
        "summary": "Create a new conversation",
        "description": "System.IO.DirectoryNotFoundException: Could not find a part of the path 'C:\\source\\Intercom\\Channels\\SampleChannel\\Content\\Methods\\SendMessage.md'.\r\n   at System.IO.__Error.WinIOError(Int32 errorCode, String maybeFullPath)\r\n   at System.IO.FileStream.Init(String path, FileMode mode, FileAccess access, Int32 rights, Boolean useRights, FileShare share, Int32 bufferSize, FileOptions options, SECURITY_ATTRIBUTES secAttrs, String msgPath, Boolean bFromProxy, Boolean useLongPath, Boolean checkHost)\r\n   at System.IO.FileStream..ctor(String path, FileMode mode, FileAccess access, FileShare share, Int32 bufferSize, FileOptions options, String msgPath, Boolean bFromProxy, Boolean useLongPath, Boolean checkHost)\r\n   at System.IO.StreamReader..ctor(String path, Encoding encoding, Boolean detectEncodingFromByteOrderMarks, Int32 bufferSize, Boolean checkHost)\r\n   at System.IO.File.InternalReadAllText(String path, Encoding encoding, Boolean checkHost)\r\n   at System.IO.File.ReadAllText(String path)\r\n   at MarkdownDocs.Program.Main(String[] args)",
        "operationId": "Conversations_CreateConversation",
        "consumes": [ "application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded" ],
        "produces": [ "application/json", "text/json", "application/xml", "text/xml" ],
        "parameters": [
          {
            "name": "parameters",
            "in": "body",
            "description": "Parameters to create the conversation from",
            "required": true,
            "schema": { "$ref": "#/definitions/ConversationParameters" }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": { "$ref": "#/definitions/ResourceResponse" }
          },
          "400": {
            "description": "",
            "schema": { "$ref": "#/definitions/APIResponse" }
          },
          "401": {
            "description": "",
            "schema": { "$ref": "#/definitions/APIResponse" }
          },
          "403": {
            "description": "",
            "schema": { "$ref": "#/definitions/APIResponse" }
          },
          "404": {
            "description": "",
            "schema": { "$ref": "#/definitions/APIResponse" }
          },
          "500": {
            "description": "",
            "schema": { "$ref": "#/definitions/APIResponse" }
          },
          "503": {
            "description": "",
            "schema": { "$ref": "#/definitions/APIResponse" }
          }
        },
        "deprecated": false
      }
    },
    "/api/v3/conversations/{conversationId}/activities": {
      "post": {
        "tags": [ "Conversations" ],
        "summary": "Send an activity to an existing conversation",
        "description": "System.IO.DirectoryNotFoundException: Could not find a part of the path 'C:\\source\\Intercom\\Channels\\SampleChannel\\Content\\Methods\\SendMessage.md'.\r\n   at System.IO.__Error.WinIOError(Int32 errorCode, String maybeFullPath)\r\n   at System.IO.FileStream.Init(String path, FileMode mode, FileAccess access, Int32 rights, Boolean useRights, FileShare share, Int32 bufferSize, FileOptions options, SECURITY_ATTRIBUTES secAttrs, String msgPath, Boolean bFromProxy, Boolean useLongPath, Boolean checkHost)\r\n   at System.IO.FileStream..ctor(String path, FileMode mode, FileAccess access, FileShare share, Int32 bufferSize, FileOptions options, String msgPath, Boolean bFromProxy, Boolean useLongPath, Boolean checkHost)\r\n   at System.IO.StreamReader..ctor(String path, Encoding encoding, Boolean detectEncodingFromByteOrderMarks, Int32 bufferSize, Boolean checkHost)\r\n   at System.IO.File.InternalReadAllText(String path, Encoding encoding, Boolean checkHost)\r\n   at System.IO.File.ReadAllText(String path)\r\n   at MarkdownDocs.Program.Main(String[] args)",
        "operationId": "Conversations_ReplyToConversation",
        "consumes": [ "application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded" ],
        "produces": [ "application/json", "text/json", "application/xml", "text/xml" ],
        "parameters": [
          {
            "name": "activity",
            "in": "body",
            "description": "Activity to send",
            "required": true,
            "schema": { "$ref": "#/definitions/Activity" }
          },
          {
            "name": "conversationId",
            "in": "path",
            "description": "Conversation ID",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": { "$ref": "#/definitions/APIResponse" }
          },
          "202": {
            "description": "",
            "schema": { "$ref": "#/definitions/APIResponse" }
          },
          "204": {
            "description": "",
            "schema": { "$ref": "#/definitions/APIResponse" }
          },
          "400": {
            "description": "",
            "schema": { "$ref": "#/definitions/APIResponse" }
          },
          "401": {
            "description": "",
            "schema": { "$ref": "#/definitions/APIResponse" }
          },
          "403": {
            "description": "",
            "schema": { "$ref": "#/definitions/APIResponse" }
          },
          "404": {
            "description": "",
            "schema": { "$ref": "#/definitions/APIResponse" }
          },
          "500": {
            "description": "",
            "schema": { "$ref": "#/definitions/APIResponse" }
          },
          "503": {
            "description": "",
            "schema": { "$ref": "#/definitions/APIResponse" }
          }
        },
        "deprecated": false
      }
    },
    "/api/v3/conversations/{conversationId}/activities/{activityId}": {
      "post": {
        "tags": [ "Conversations" ],
        "summary": "Send an activity to an existing conversation",
        "description": "System.IO.DirectoryNotFoundException: Could not find a part of the path 'C:\\source\\Intercom\\Channels\\SampleChannel\\Content\\Methods\\SendMessage.md'.\r\n   at System.IO.__Error.WinIOError(Int32 errorCode, String maybeFullPath)\r\n   at System.IO.FileStream.Init(String path, FileMode mode, FileAccess access, Int32 rights, Boolean useRights, FileShare share, Int32 bufferSize, FileOptions options, SECURITY_ATTRIBUTES secAttrs, String msgPath, Boolean bFromProxy, Boolean useLongPath, Boolean checkHost)\r\n   at System.IO.FileStream..ctor(String path, FileMode mode, FileAccess access, FileShare share, Int32 bufferSize, FileOptions options, String msgPath, Boolean bFromProxy, Boolean useLongPath, Boolean checkHost)\r\n   at System.IO.StreamReader..ctor(String path, Encoding encoding, Boolean detectEncodingFromByteOrderMarks, Int32 bufferSize, Boolean checkHost)\r\n   at System.IO.File.InternalReadAllText(String path, Encoding encoding, Boolean checkHost)\r\n   at System.IO.File.ReadAllText(String path)\r\n   at MarkdownDocs.Program.Main(String[] args)",
        "operationId": "Conversations_ReplyToActivity",
        "consumes": [ "application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded" ],
        "produces": [ "application/json", "text/json", "application/xml", "text/xml" ],
        "parameters": [
          {
            "name": "activity",
            "in": "body",
            "description": "Activity to send",
            "required": true,
            "schema": { "$ref": "#/definitions/Activity" }
          },
          {
            "name": "conversationId",
            "in": "path",
            "description": "Conversation ID",
            "required": true,
            "type": "string"
          },
          {
            "name": "activityId",
            "in": "path",
            "description": "activityId the reply is to (OPTIONAL)",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": { "$ref": "#/definitions/APIResponse" }
          },
          "202": {
            "description": "",
            "schema": { "$ref": "#/definitions/APIResponse" }
          },
          "204": {
            "description": "",
            "schema": { "$ref": "#/definitions/APIResponse" }
          },
          "400": {
            "description": "",
            "schema": { "$ref": "#/definitions/APIResponse" }
          },
          "401": {
            "description": "",
            "schema": { "$ref": "#/definitions/APIResponse" }
          },
          "403": {
            "description": "",
            "schema": { "$ref": "#/definitions/APIResponse" }
          },
          "404": {
            "description": "",
            "schema": { "$ref": "#/definitions/APIResponse" }
          },
          "500": {
            "description": "",
            "schema": { "$ref": "#/definitions/APIResponse" }
          },
          "503": {
            "description": "",
            "schema": { "$ref": "#/definitions/APIResponse" }
          }
        },
        "deprecated": false
      }
    },
    "/api/v3/conversations/{conversationId}/members": {
      "get": {
        "tags": [ "Conversations" ],
        "summary": "Get the list of members in this conversation",
        "operationId": "Conversations_GetMembers",
        "consumes": [ ],
        "produces": [ "application/json", "text/json", "application/xml", "text/xml" ],
        "parameters": [
          {
            "name": "conversationId",
            "in": "path",
            "description": "Conversation ID",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "﻿An array of Channel Account objects will be returned\r\n",
            "schema": {
              "type": "array",
              "items": { "$ref": "#/definitions/ChannelAccount" }
            }
          },
          "202": {
            "description": "",
            "schema": { "$ref": "#/definitions/APIResponse" }
          },
          "204": {
            "description": "",
            "schema": { "$ref": "#/definitions/APIResponse" }
          },
          "400": {
            "description": "",
            "schema": { "$ref": "#/definitions/APIResponse" }
          },
          "401": {
            "description": "",
            "schema": { "$ref": "#/definitions/APIResponse" }
          },
          "403": {
            "description": "",
            "schema": { "$ref": "#/definitions/APIResponse" }
          },
          "404": {
            "description": "",
            "schema": { "$ref": "#/definitions/APIResponse" }
          },
          "500": {
            "description": "",
            "schema": { "$ref": "#/definitions/APIResponse" }
          },
          "503": {
            "description": "",
            "schema": { "$ref": "#/definitions/APIResponse" }
          }
        },
        "deprecated": false
      }
    },
    "/api/v3/conversations/{conversationId}/activities/{activityId}/members": {
      "get": {
        "tags": [ "Conversations" ],
        "summary": "Get the list of members in a single activity in a conversation",
        "operationId": "Conversations_GetActivityMembers",
        "consumes": [ ],
        "produces": [ "application/json", "text/json", "application/xml", "text/xml" ],
        "parameters": [
          {
            "name": "conversationId",
            "in": "path",
            "description": "Conversation ID",
            "required": true,
            "type": "string"
          },
          {
            "name": "activityId",
            "in": "path",
            "description": "(OPTIONAL) Activity ID",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "﻿An array of Channel Account objects will be returned\r\n",
            "schema": {
              "type": "array",
              "items": { "$ref": "#/definitions/ChannelAccount" }
            }
          },
          "202": {
            "description": "",
            "schema": { "$ref": "#/definitions/APIResponse" }
          },
          "204": {
            "description": "",
            "schema": { "$ref": "#/definitions/APIResponse" }
          },
          "400": {
            "description": "",
            "schema": { "$ref": "#/definitions/APIResponse" }
          },
          "401": {
            "description": "",
            "schema": { "$ref": "#/definitions/APIResponse" }
          },
          "403": {
            "description": "",
            "schema": { "$ref": "#/definitions/APIResponse" }
          },
          "404": {
            "description": "",
            "schema": { "$ref": "#/definitions/APIResponse" }
          },
          "500": {
            "description": "",
            "schema": { "$ref": "#/definitions/APIResponse" }
          },
          "503": {
            "description": "",
            "schema": { "$ref": "#/definitions/APIResponse" }
          }
        },
        "deprecated": false
      }
    }
  },
  "definitions": {
    "ConversationParameters": {
      "type": "object",
      "properties": {
        "bot": {
          "$ref": "#/definitions/ChannelAccount",
          "description": "The bot address of the bot requesting a conversation"
        },
        "members": {
          "description": "Members to add to the conversation",
          "type": "array",
          "items": { "$ref": "#/definitions/ChannelAccount" }
        },
        "topicName": {
          "description": "(Optional) Topic of the conversation (if supported by the channel)",
          "type": "string"
        }
      }
    },
    "ChannelAccount": {
      "description": "Channel account information needed to route a message",
      "type": "object",
      "properties": {
        "id": {
          "description": "Channel id for the user or bot on this channel (Example: joe@smith.com, or @joesmith or 123456)",
          "type": "string"
        },
        "name": {
          "description": "Display friendly name",
          "type": "string"
        }
      }
    },
    "Object": {
      "type": "object",
      "properties": { }
    },
    "ResourceResponse": {
      "type": "object",
      "properties": {
        "id": {
          "description": "Id of the resource",
          "type": "string"
        }
      }
    },
    "APIResponse": {
      "type": "object",
      "properties": { "message": { "type": "string" } }
    },
    "Activity": {
      "type": "object",
      "properties": {
        "type": {
          "description": "Activity type\r\nThe type of the activity (aka \"message/carosel\" \"contactUpdate\" \"typing\" etc.",
          "type": "string"
        },
        "id": {
          "description": "Id for the activity",
          "type": "string"
        },
        "timestamp": {
          "format": "date-time",
          "description": "Time when message was sent",
          "type": "string"
        },
        "serviceUrl": {
          "description": "Service endpoint",
          "type": "string"
        },
        "channelId": {
          "description": "ChannelId the activity was on",
          "type": "string"
        },
        "from": {
          "$ref": "#/definitions/ChannelAccount",
          "description": "Sender address"
        },
        "conversation": {
          "$ref": "#/definitions/ConversationAccount",
          "description": "Conversation"
        },
        "recipient": {
          "$ref": "#/definitions/ChannelAccount",
          "description": "(Outbound to bot only) Bot's address that received the message"
        },
        "membersAdded": {
          "description": "Array of address added",
          "type": "array",
          "items": { "$ref": "#/definitions/ChannelAccount" }
        },
        "membersRemoved": {
          "description": "Array of addresses removed",
          "type": "array",
          "items": { "$ref": "#/definitions/ChannelAccount" }
        },
        "topicName": {
          "description": "Conversations new topic name",
          "type": "string"
        },
        "historyDisclosed": {
          "description": "the previous history of the channel was disclosed",
          "type": "boolean"
        },
        "locale": {
          "description": "The language code of the Text field",
          "type": "string"
        },
        "text": {
          "description": "Content for the message",
          "type": "string"
        },
        "summary": {
          "description": "Text to display if you can't render cards",
          "type": "string"
        },
        "attachments": {
          "description": "Attachments",
          "type": "array",
          "items": { "$ref": "#/definitions/Attachment" }
        },
        "entities": {
          "description": "Entities \r\nCollection of Entity which contain metadata about this activity (each is typed)",
          "type": "array",
          "items": { "$ref": "#/definitions/Entity" }
        },
        "channelData": {
          "$ref": "#/definitions/Object",
          "description": "Channel specific payload"
        },
        "action": {
          "description": "ContactAdded/Removed action",
          "type": "string"
        },
        "replyToId": {
          "description": "the original id this message is a response to",
          "type": "string"
        }
      }
    },
    "ConversationAccount": {
      "description": "Channel account information for a conversation",
      "type": "object",
      "properties": {
        "isGroup": {
          "description": "Is this a reference to a group",
          "type": "boolean"
        },
        "id": {
          "description": "Channel id for the user or bot on this channel (Example: joe@smith.com, or @joesmith or 123456)",
          "type": "string"
        },
        "name": {
          "description": "Display friendly name",
          "type": "string"
        }
      }
    },
    "Attachment": {
      "type": "object",
      "properties": {
        "contentType": {
          "description": "mimetype/Contenttype for the file",
          "type": "string"
        },
        "contentUrl": {
          "description": "Content Url",
          "type": "string"
        },
        "content": {
          "$ref": "#/definitions/Object",
          "description": "Embedded content"
        },
        "name": {
          "description": "(OPTIONAL) The name of the attachment",
          "type": "string"
        },
        "thumbnailUrl": {
          "description": "(OPTIONAL) Thumbnail associated with attachment",
          "type": "string"
        }
      }
    },
    "Entity": {
      "description": "Object of schema.org types",
      "type": "object",
      "properties": {
        "type": {
          "description": "Entity Type (typically from schema.org types)",
          "type": "string"
        }
      }
    },
    "HeroCard": {
      "type": "object",
      "properties": {
        "title": {
          "description": "Title of the card",
          "type": "string"
        },
        "subtitle": {
          "description": "Subtitle of the card",
          "type": "string"
        },
        "text": {
          "description": "Text for the card",
          "type": "string"
        },
        "images": {
          "description": "Array of i",
          "type": "array",
          "items": { "$ref": "#/definitions/Image" }
        },
        "buttons": {
          "description": "Set of actions applicable to the current card",
          "type": "array",
          "items": { "$ref": "#/definitions/Action" }
        },
        "tap": {
          "$ref": "#/definitions/Action",
          "description": "This action will be activated when user taps on the card itself"
        }
      }
    },
    "Image": {
      "type": "object",
      "properties": {
        "url": {
          "description": "URL Thumbnail image for major content property.",
          "type": "string"
        },
        "alt": {
          "description": "Image description intended for screen readers",
          "type": "string"
        },
        "tap": {
          "$ref": "#/definitions/Action",
          "description": "Action assigned to specific Attachment.E.g.navigate to specific URL or play/open media content"
        }
      }
    },
    "Action": {
      "type": "object",
      "properties": {
        "type": {
          "description": "Defines the type of action implemented by this button.",
          "enum": [ "openUrl", "imBack", "postBack", "playAudio", "playVideo", "showImage", "downloadFile" ],
          "type": "string"
        },
        "title": {
          "description": "Text description which appear on the button.",
          "type": "string"
        },
        "image": {
          "description": "URL Picture which will appear on the button, next to text label. \r\nMedia hosted on 3rd party domains will be automatically hosted on \r\nauth protected CDN.Auth protection will be used to ensure that content \r\nuploaded to Skype CDN will only be accessible by Microsoft Clients\r\nPlease refer to Chapter 7 for description of media caching algorithm.",
          "type": "string"
        },
        "value": {
          "description": "Supplementary parameter for action. Content of this property depends on the ActionType",
          "type": "string"
        }
      }
    },
    "ThumbnailCard": {
      "type": "object",
      "properties": {
        "title": {
          "description": "Title of the card",
          "type": "string"
        },
        "subtitle": {
          "description": "Subtitle of the card",
          "type": "string"
        },
        "text": {
          "description": "Text for the card",
          "type": "string"
        },
        "images": {
          "description": "Array of i",
          "type": "array",
          "items": { "$ref": "#/definitions/Image" }
        },
        "buttons": {
          "description": "Set of actions applicable to the current card",
          "type": "array",
          "items": { "$ref": "#/definitions/Action" }
        },
        "tap": {
          "$ref": "#/definitions/Action",
          "description": "This action will be activated when user taps on the card itself"
        }
      }
    },
    "ReceiptCard": {
      "type": "object",
      "properties": {
        "title": {
          "description": "Title of the card",
          "type": "string"
        },
        "items": {
          "description": "Array of Receipt Items",
          "type": "array",
          "items": { "$ref": "#/definitions/ReceiptItem" }
        },
        "facts": {
          "description": "Array of Fact Objects   Array of key-value pairs.",
          "type": "array",
          "items": { "$ref": "#/definitions/Fact" }
        },
        "tap": {
          "$ref": "#/definitions/Action",
          "description": "This action will be activated when user taps on the card"
        },
        "total": {
          "description": "Total amount of money paid (or should be paid)",
          "type": "string"
        },
        "tax": {
          "description": "Total amount of TAX paid(or should be paid)",
          "type": "string"
        },
        "vat": {
          "description": "Total amount of VAT paid(or should be paid)",
          "type": "string"
        },
        "buttons": {
          "description": "Set of actions applicable to the current card",
          "type": "array",
          "items": { "$ref": "#/definitions/Action" }
        }
      }
    },
    "ReceiptItem": {
      "type": "object",
      "properties": {
        "title": {
          "description": "Title of the Card",
          "type": "string"
        },
        "subtitle": {
          "description": "Subtitle appears just below Title field, differs from Title in font styling only",
          "type": "string"
        },
        "text": {
          "description": "Text field appears just below subtitle, differs from Subtitle in font styling only",
          "type": "string"
        },
        "image": {
          "$ref": "#/definitions/Image",
          "description": "Image"
        },
        "price": {
          "description": "Amount with currency",
          "type": "string"
        },
        "quantity": {
          "description": "Number of items of given kind",
          "type": "string"
        },
        "tap": {
          "$ref": "#/definitions/Action",
          "description": "This action will be activated when user taps on the Item bubble."
        }
      }
    },
    "Fact": {
      "description": "Set of key-value pairs. Advantage of this section is that key and value properties will be \r\nrendered with default style information with some delimiter between them. So there is no need for developer to specify style information.",
      "type": "object",
      "properties": {
        "key": { "type": "string" },
        "value": { "type": "string" }
      }
    },
    "SigninCard": {
      "description": "A card representing a request to signing",
      "type": "object",
      "properties": {
        "title": {
          "description": "Title for signin request",
          "type": "string"
        },
        "button": {
          "$ref": "#/definitions/Action",
          "description": "Action to use to perform signin"
        }
      }
    }
  },
  "securityDefinitions": {
    "basic": {
      "type": "basic",
      "description": "Basic HTTP Authentication using AppId/AppSecret"
    }
  }
}