// Code generated by Microsoft (R) AutoRest Code Generator 0.13.0.0
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.

namespace Microsoft.Bot.Connector
{
    using System;
    using System.Collections.Generic;
    using System.Net.Http;
    using System.Threading;
    using System.Threading.Tasks;
    using Microsoft.Rest;
    

    /// <summary>
    /// Conversations operations.
    /// </summary>
    public partial interface IConversations
    {
        /// <summary>
        /// Create a new conversation
        /// </summary>
        /// System.IO.DirectoryNotFoundException: Could not find a part of the
        /// path
        /// 'C:\\\\source\\\\Intercom\\\\Channels\\\\SampleChannel\\\\Content\\\\Methods\\\\SendMessage.md'.
        /// at System.IO.__Error.WinIOError(Int32 errorCode, String
        /// maybeFullPath)
        /// at System.IO.FileStream.Init(String path, FileMode mode,
        /// FileAccess access, Int32 rights, Boolean useRights, FileShare
        /// share, Int32 bufferSize, FileOptions options, SECURITY_ATTRIBUTES
        /// secAttrs, String msgPath, Boolean bFromProxy, Boolean
        /// useLongPath, Boolean checkHost)
        /// at System.IO.FileStream..ctor(String path, FileMode mode,
        /// FileAccess access, FileShare share, Int32 bufferSize, FileOptions
        /// options, String msgPath, Boolean bFromProxy, Boolean useLongPath,
        /// Boolean checkHost)
        /// at System.IO.StreamReader..ctor(String path, Encoding encoding,
        /// Boolean detectEncodingFromByteOrderMarks, Int32 bufferSize,
        /// Boolean checkHost)
        /// at System.IO.File.InternalReadAllText(String path, Encoding
        /// encoding, Boolean checkHost)
        /// at System.IO.File.ReadAllText(String path)
        /// at MarkdownDocs.Program.Main(String[] args)
        /// <param name='parameters'>
        /// Parameters to create the conversation from
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<object>> CreateConversationWithHttpMessagesAsync(ConversationParameters parameters, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Send an activity to an existing conversation
        /// </summary>
        /// System.IO.DirectoryNotFoundException: Could not find a part of the
        /// path
        /// 'C:\\\\source\\\\Intercom\\\\Channels\\\\SampleChannel\\\\Content\\\\Methods\\\\SendMessage.md'.
        /// at System.IO.__Error.WinIOError(Int32 errorCode, String
        /// maybeFullPath)
        /// at System.IO.FileStream.Init(String path, FileMode mode,
        /// FileAccess access, Int32 rights, Boolean useRights, FileShare
        /// share, Int32 bufferSize, FileOptions options, SECURITY_ATTRIBUTES
        /// secAttrs, String msgPath, Boolean bFromProxy, Boolean
        /// useLongPath, Boolean checkHost)
        /// at System.IO.FileStream..ctor(String path, FileMode mode,
        /// FileAccess access, FileShare share, Int32 bufferSize, FileOptions
        /// options, String msgPath, Boolean bFromProxy, Boolean useLongPath,
        /// Boolean checkHost)
        /// at System.IO.StreamReader..ctor(String path, Encoding encoding,
        /// Boolean detectEncodingFromByteOrderMarks, Int32 bufferSize,
        /// Boolean checkHost)
        /// at System.IO.File.InternalReadAllText(String path, Encoding
        /// encoding, Boolean checkHost)
        /// at System.IO.File.ReadAllText(String path)
        /// at MarkdownDocs.Program.Main(String[] args)
        /// <param name='activity'>
        /// Activity to send
        /// </param>
        /// <param name='conversationId'>
        /// Conversation ID
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<APIResponse>> ReplyToConversationWithHttpMessagesAsync(Activity activity, string conversationId, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Send an activity to an existing conversation
        /// </summary>
        /// System.IO.DirectoryNotFoundException: Could not find a part of the
        /// path
        /// 'C:\\\\source\\\\Intercom\\\\Channels\\\\SampleChannel\\\\Content\\\\Methods\\\\SendMessage.md'.
        /// at System.IO.__Error.WinIOError(Int32 errorCode, String
        /// maybeFullPath)
        /// at System.IO.FileStream.Init(String path, FileMode mode,
        /// FileAccess access, Int32 rights, Boolean useRights, FileShare
        /// share, Int32 bufferSize, FileOptions options, SECURITY_ATTRIBUTES
        /// secAttrs, String msgPath, Boolean bFromProxy, Boolean
        /// useLongPath, Boolean checkHost)
        /// at System.IO.FileStream..ctor(String path, FileMode mode,
        /// FileAccess access, FileShare share, Int32 bufferSize, FileOptions
        /// options, String msgPath, Boolean bFromProxy, Boolean useLongPath,
        /// Boolean checkHost)
        /// at System.IO.StreamReader..ctor(String path, Encoding encoding,
        /// Boolean detectEncodingFromByteOrderMarks, Int32 bufferSize,
        /// Boolean checkHost)
        /// at System.IO.File.InternalReadAllText(String path, Encoding
        /// encoding, Boolean checkHost)
        /// at System.IO.File.ReadAllText(String path)
        /// at MarkdownDocs.Program.Main(String[] args)
        /// <param name='activity'>
        /// Activity to send
        /// </param>
        /// <param name='conversationId'>
        /// Conversation ID
        /// </param>
        /// <param name='activityId'>
        /// activityId the reply is to (OPTIONAL)
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<APIResponse>> ReplyToActivityWithHttpMessagesAsync(Activity activity, string conversationId, string activityId, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Get the list of members in this conversation
        /// </summary>
        /// <param name='conversationId'>
        /// Conversation ID
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<object>> GetMembersWithHttpMessagesAsync(string conversationId, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Get the list of members in a single activity in a conversation
        /// </summary>
        /// <param name='conversationId'>
        /// Conversation ID
        /// </param>
        /// <param name='activityId'>
        /// (OPTIONAL) Activity ID
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<object>> GetActivityMembersWithHttpMessagesAsync(string conversationId, string activityId, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));
    }
}
