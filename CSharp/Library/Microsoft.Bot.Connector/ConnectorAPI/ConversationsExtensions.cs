// Code generated by Microsoft (R) AutoRest Code Generator 0.13.0.0
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.

namespace Microsoft.Bot.Connector
{
    using System;
    using System.Collections;
    using System.Collections.Generic;
    using System.Threading;
    using System.Threading.Tasks;
    using Microsoft.Rest;


    public static partial class ConversationsExtensions
    {
        /// <summary>
        /// Create a new conversation
        /// </summary>
        /// System.IO.DirectoryNotFoundException: Could not find a part of the path
        /// 'C:\\\\source\\\\Intercom\\\\Channels\\\\SampleChannel\\\\Content\\\\Methods\\\\SendMessage.md'.
        /// at System.IO.__Error.WinIOError(Int32 errorCode, String maybeFullPath)
        /// at System.IO.FileStream.Init(String path, FileMode mode, FileAccess
        /// access, Int32 rights, Boolean useRights, FileShare share, Int32
        /// bufferSize, FileOptions options, SECURITY_ATTRIBUTES secAttrs, String
        /// msgPath, Boolean bFromProxy, Boolean useLongPath, Boolean checkHost)
        /// at System.IO.FileStream..ctor(String path, FileMode mode, FileAccess
        /// access, FileShare share, Int32 bufferSize, FileOptions options, String
        /// msgPath, Boolean bFromProxy, Boolean useLongPath, Boolean checkHost)
        /// at System.IO.StreamReader..ctor(String path, Encoding encoding, Boolean
        /// detectEncodingFromByteOrderMarks, Int32 bufferSize, Boolean checkHost)
        /// at System.IO.File.InternalReadAllText(String path, Encoding encoding,
        /// Boolean checkHost)
        /// at System.IO.File.ReadAllText(String path)
        /// at MarkdownDocs.Program.Main(String[] args)
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='parameters'>
        /// Parameters to create the conversation from
        /// </param>
        public static ResourceResponse CreateConversation(this IConversations operations, ConversationParameters parameters)
        {
            return Task.Factory.StartNew(s => ((IConversations)s).CreateConversationAsync(parameters), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }

        /// <summary>
        /// Create a new conversation
        /// </summary>
        /// System.IO.DirectoryNotFoundException: Could not find a part of the path
        /// 'C:\\\\source\\\\Intercom\\\\Channels\\\\SampleChannel\\\\Content\\\\Methods\\\\SendMessage.md'.
        /// at System.IO.__Error.WinIOError(Int32 errorCode, String maybeFullPath)
        /// at System.IO.FileStream.Init(String path, FileMode mode, FileAccess
        /// access, Int32 rights, Boolean useRights, FileShare share, Int32
        /// bufferSize, FileOptions options, SECURITY_ATTRIBUTES secAttrs, String
        /// msgPath, Boolean bFromProxy, Boolean useLongPath, Boolean checkHost)
        /// at System.IO.FileStream..ctor(String path, FileMode mode, FileAccess
        /// access, FileShare share, Int32 bufferSize, FileOptions options, String
        /// msgPath, Boolean bFromProxy, Boolean useLongPath, Boolean checkHost)
        /// at System.IO.StreamReader..ctor(String path, Encoding encoding, Boolean
        /// detectEncodingFromByteOrderMarks, Int32 bufferSize, Boolean checkHost)
        /// at System.IO.File.InternalReadAllText(String path, Encoding encoding,
        /// Boolean checkHost)
        /// at System.IO.File.ReadAllText(String path)
        /// at MarkdownDocs.Program.Main(String[] args)
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='parameters'>
        /// Parameters to create the conversation from
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async Task<ResourceResponse> CreateConversationAsync(this IConversations operations, ConversationParameters parameters, CancellationToken cancellationToken = default(CancellationToken))
        {
            // TEMP UNTIL WE HAVE JWT TOKENS
            Dictionary<string, List<string>> headers = new Dictionary<string, List<string>>();
            headers.Add("botid", new List<string>() { System.Configuration.ConfigurationManager.AppSettings["appId"] });
            var _result = await operations.CreateConversationWithHttpMessagesAsync(parameters, headers, cancellationToken).ConfigureAwait(false);
            // END TEmP
            //var _result = await operations.CreateConversationWithHttpMessagesAsync(parameters, null, cancellationToken).ConfigureAwait(false);
            return _result.HandleError<ResourceResponse>();
        }

        /// <summary>
        /// Send an activity to a conversation
        /// </summary>
        /// System.IO.DirectoryNotFoundException: Could not find a part of the path
        /// 'C:\\\\source\\\\Intercom\\\\Channels\\\\SampleChannel\\\\Content\\\\Methods\\\\SendMessage.md'.
        /// at System.IO.__Error.WinIOError(Int32 errorCode, String maybeFullPath)
        /// at System.IO.FileStream.Init(String path, FileMode mode, FileAccess
        /// access, Int32 rights, Boolean useRights, FileShare share, Int32
        /// bufferSize, FileOptions options, SECURITY_ATTRIBUTES secAttrs, String
        /// msgPath, Boolean bFromProxy, Boolean useLongPath, Boolean checkHost)
        /// at System.IO.FileStream..ctor(String path, FileMode mode, FileAccess
        /// access, FileShare share, Int32 bufferSize, FileOptions options, String
        /// msgPath, Boolean bFromProxy, Boolean useLongPath, Boolean checkHost)
        /// at System.IO.StreamReader..ctor(String path, Encoding encoding, Boolean
        /// detectEncodingFromByteOrderMarks, Int32 bufferSize, Boolean checkHost)
        /// at System.IO.File.InternalReadAllText(String path, Encoding encoding,
        /// Boolean checkHost)
        /// at System.IO.File.ReadAllText(String path)
        /// at MarkdownDocs.Program.Main(String[] args)
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='activity'>
        /// Activity to send
        /// </param>
        /// <param name='conversationId'>
        /// Conversation ID
        /// </param>
        public static APIResponse SendToConversation(this IConversations operations, Activity activity, string conversationId)
        {
            return Task.Factory.StartNew(s => ((IConversations)s).SendToConversationAsync(activity, conversationId), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }

        /// <summary>
        /// Send an activity to a conversation
        /// </summary>
        /// System.IO.DirectoryNotFoundException: Could not find a part of the path
        /// 'C:\\\\source\\\\Intercom\\\\Channels\\\\SampleChannel\\\\Content\\\\Methods\\\\SendMessage.md'.
        /// at System.IO.__Error.WinIOError(Int32 errorCode, String maybeFullPath)
        /// at System.IO.FileStream.Init(String path, FileMode mode, FileAccess
        /// access, Int32 rights, Boolean useRights, FileShare share, Int32
        /// bufferSize, FileOptions options, SECURITY_ATTRIBUTES secAttrs, String
        /// msgPath, Boolean bFromProxy, Boolean useLongPath, Boolean checkHost)
        /// at System.IO.FileStream..ctor(String path, FileMode mode, FileAccess
        /// access, FileShare share, Int32 bufferSize, FileOptions options, String
        /// msgPath, Boolean bFromProxy, Boolean useLongPath, Boolean checkHost)
        /// at System.IO.StreamReader..ctor(String path, Encoding encoding, Boolean
        /// detectEncodingFromByteOrderMarks, Int32 bufferSize, Boolean checkHost)
        /// at System.IO.File.InternalReadAllText(String path, Encoding encoding,
        /// Boolean checkHost)
        /// at System.IO.File.ReadAllText(String path)
        /// at MarkdownDocs.Program.Main(String[] args)
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='activity'>
        /// Activity to send
        /// </param>
        /// <param name='conversationId'>
        /// Conversation ID
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async Task<APIResponse> SendToConversationAsync(this IConversations operations, Activity activity, string conversationId, CancellationToken cancellationToken = default(CancellationToken))
        {
            // TEMP UNTIL WE HAVE JWT TOKENS
            Dictionary<string, List<string>> headers = new Dictionary<string, List<string>>();
            headers.Add("botid", new List<string>() { System.Configuration.ConfigurationManager.AppSettings["appId"] });
            // END TEmP
            var _result = await operations.SendToConversationWithHttpMessagesAsync(activity, conversationId, headers, cancellationToken).ConfigureAwait(false);
            return _result.Body;
        }

        /// <summary>
        /// Reply to an activity in a conversation
        /// </summary>
        /// System.IO.DirectoryNotFoundException: Could not find a part of the path
        /// 'C:\\\\source\\\\Intercom\\\\Channels\\\\SampleChannel\\\\Content\\\\Methods\\\\SendMessage.md'.
        /// at System.IO.__Error.WinIOError(Int32 errorCode, String maybeFullPath)
        /// at System.IO.FileStream.Init(String path, FileMode mode, FileAccess
        /// access, Int32 rights, Boolean useRights, FileShare share, Int32
        /// bufferSize, FileOptions options, SECURITY_ATTRIBUTES secAttrs, String
        /// msgPath, Boolean bFromProxy, Boolean useLongPath, Boolean checkHost)
        /// at System.IO.FileStream..ctor(String path, FileMode mode, FileAccess
        /// access, FileShare share, Int32 bufferSize, FileOptions options, String
        /// msgPath, Boolean bFromProxy, Boolean useLongPath, Boolean checkHost)
        /// at System.IO.StreamReader..ctor(String path, Encoding encoding, Boolean
        /// detectEncodingFromByteOrderMarks, Int32 bufferSize, Boolean checkHost)
        /// at System.IO.File.InternalReadAllText(String path, Encoding encoding,
        /// Boolean checkHost)
        /// at System.IO.File.ReadAllText(String path)
        /// at MarkdownDocs.Program.Main(String[] args)
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='activity'>
        /// Activity to send
        /// </param>
        /// <param name='conversationId'>
        /// Conversation ID
        /// </param>
        /// <param name='activityId'>
        /// activityId the reply is to (OPTIONAL)
        /// </param>
        public static APIResponse ReplyToActivity(this IConversations operations, Activity activity, string conversationId, string activityId)
        {
            return Task.Factory.StartNew(s => ((IConversations)s).ReplyToActivityAsync(activity, conversationId, activityId), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }

        /// <summary>
        /// Reply to an activity in a conversation
        /// </summary>
        /// System.IO.DirectoryNotFoundException: Could not find a part of the path
        /// 'C:\\\\source\\\\Intercom\\\\Channels\\\\SampleChannel\\\\Content\\\\Methods\\\\SendMessage.md'.
        /// at System.IO.__Error.WinIOError(Int32 errorCode, String maybeFullPath)
        /// at System.IO.FileStream.Init(String path, FileMode mode, FileAccess
        /// access, Int32 rights, Boolean useRights, FileShare share, Int32
        /// bufferSize, FileOptions options, SECURITY_ATTRIBUTES secAttrs, String
        /// msgPath, Boolean bFromProxy, Boolean useLongPath, Boolean checkHost)
        /// at System.IO.FileStream..ctor(String path, FileMode mode, FileAccess
        /// access, FileShare share, Int32 bufferSize, FileOptions options, String
        /// msgPath, Boolean bFromProxy, Boolean useLongPath, Boolean checkHost)
        /// at System.IO.StreamReader..ctor(String path, Encoding encoding, Boolean
        /// detectEncodingFromByteOrderMarks, Int32 bufferSize, Boolean checkHost)
        /// at System.IO.File.InternalReadAllText(String path, Encoding encoding,
        /// Boolean checkHost)
        /// at System.IO.File.ReadAllText(String path)
        /// at MarkdownDocs.Program.Main(String[] args)
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='activity'>
        /// Activity to send
        /// </param>
        /// <param name='conversationId'>
        /// Conversation ID
        /// </param>
        /// <param name='activityId'>
        /// activityId the reply is to (OPTIONAL)
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async Task<APIResponse> ReplyToActivityAsync(this IConversations operations, Activity activity, string conversationId, string activityId, CancellationToken cancellationToken = default(CancellationToken))
        {
            // TEMP UNTIL WE HAVE JWT TOKENS
            Dictionary<string, List<string>> headers = new Dictionary<string, List<string>>();
            headers.Add("botid", new List<string>() { System.Configuration.ConfigurationManager.AppSettings["appId"] });
            // END TEmP
            var _result = await operations.ReplyToActivityWithHttpMessagesAsync(activity, conversationId, activityId, headers, cancellationToken).ConfigureAwait(false);
            return _result.Body;
        }

        /// <summary>
        /// Get the list of members in this conversation
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='conversationId'>
        /// Conversation ID
        /// </param>
        public static ChannelAccount[] GetConversationMembers(this IConversations operations, string conversationId)
        {
            return Task.Factory.StartNew(s => ((IConversations)s).GetConversationMembersAsync(conversationId), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }

        /// <summary>
        /// Get the list of members in this conversation
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='conversationId'>
        /// Conversation ID
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async Task<ChannelAccount[]> GetConversationMembersAsync(this IConversations operations, string conversationId, CancellationToken cancellationToken = default(CancellationToken))
        {
            // TEMP UNTIL WE HAVE JWT TOKENS
            Dictionary<string, List<string>> headers = new Dictionary<string, List<string>>();
            headers.Add("botid", new List<string>() { System.Configuration.ConfigurationManager.AppSettings["appId"] });
            // END TEmP
            var _result = await operations.GetConversationMembersWithHttpMessagesAsync(conversationId, headers, cancellationToken).ConfigureAwait(false);
            return _result.HandleError<ChannelAccount[]>();
        }

        /// <summary>
        /// Get the list of members in a single activity in a conversation
        /// </summary>
        /// for most channels this is the same as GetConversationMemebers
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='conversationId'>
        /// Conversation ID
        /// </param>
        /// <param name='activityId'>
        /// Activity ID
        /// </param>
        public static ChannelAccount[] GetActivityMembers(this IConversations operations, string conversationId, string activityId)
        {
            return Task.Factory.StartNew(s => ((IConversations)s).GetActivityMembersAsync(conversationId, activityId), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }

        /// <summary>
        /// Get the list of members in a single activity in a conversation
        /// </summary>
        /// for most channels this is the same as GetConversationMemebers
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='conversationId'>
        /// Conversation ID
        /// </param>
        /// <param name='activityId'>
        /// Activity ID
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async Task<ChannelAccount[]> GetActivityMembersAsync(this IConversations operations, string conversationId, string activityId, CancellationToken cancellationToken = default(CancellationToken))
        {
            // TEMP UNTIL WE HAVE JWT TOKENS
            Dictionary<string, List<string>> headers = new Dictionary<string, List<string>>();
            headers.Add("botid", new List<string>() { System.Configuration.ConfigurationManager.AppSettings["appId"] });
            // END TEmP
            var _result = await operations.GetActivityMembersWithHttpMessagesAsync(conversationId, activityId, headers, cancellationToken).ConfigureAwait(false);
            return _result.HandleError<ChannelAccount[]>();
        }

    }
}
