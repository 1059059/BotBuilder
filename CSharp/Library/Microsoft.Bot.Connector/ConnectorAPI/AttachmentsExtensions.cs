// Code generated by Microsoft (R) AutoRest Code Generator 0.13.0.0
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.

namespace Microsoft.Bot.Connector
{
    using System;
    using System.Collections;
    using System.Collections.Generic;
    using System.Threading;
    using System.Threading.Tasks;
    using Microsoft.Rest;
    

    public static partial class AttachmentsExtensions
    {
            /// <summary>
            /// Get AttachmentInfo structure describing the attachment views
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='attachmentId'>
            /// attachment id
            /// </param>
            public static object GetAttachmentInfo(this IAttachments operations, string attachmentId)
            {
                return Task.Factory.StartNew(s => ((IAttachments)s).GetAttachmentInfoAsync(attachmentId), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get AttachmentInfo structure describing the attachment views
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='attachmentId'>
            /// attachment id
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> GetAttachmentInfoAsync(this IAttachments operations, string attachmentId, CancellationToken cancellationToken = default(CancellationToken))
            {
                var _result = await operations.GetAttachmentInfoWithHttpMessagesAsync(attachmentId, null, cancellationToken).ConfigureAwait(false);
                return _result.Body;
            }

            /// <summary>
            /// Get attachment content
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='attachmentId'>
            /// attachment id
            /// </param>
            /// <param name='viewId'>
            /// View from attachment metadata ("original" is original content)
            /// </param>
            public static object GetAttachment(this IAttachments operations, string attachmentId, string viewId)
            {
                return Task.Factory.StartNew(s => ((IAttachments)s).GetAttachmentAsync(attachmentId, viewId), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get attachment content
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='attachmentId'>
            /// attachment id
            /// </param>
            /// <param name='viewId'>
            /// View from attachment metadata ("original" is original content)
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> GetAttachmentAsync( this IAttachments operations, string attachmentId, string viewId, CancellationToken cancellationToken = default(CancellationToken))
            {
                var _result = await operations.GetAttachmentWithHttpMessagesAsync(attachmentId, viewId, null, cancellationToken).ConfigureAwait(false);
                return _result.Body;
            }

    }
}
